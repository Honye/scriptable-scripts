{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "th"
  },
  "name" : "Matrix",
  "script" : "\/**\n * @version 0.1.1\n * @author Honye\n *\/\n\nconst iCloudManager = FileManager.iCloud();\nconst fm = iCloudManager.isFileStoredIniCloud(module.filename) ? iCloudManager : FileManager.local();\nconst modulesRoot = fm.libraryDirectory();\n\/**\n * Module 统一存放在 library 目录\n * @param {string} path\n *\/\nconst requireModule = (path) => importModule(fm.joinPath(modulesRoot, path));\n\nconst { hashCode, i18n, phoneSize, getImage, useCache } = requireModule('utils.module');\nconst { useGrid } = requireModule('widgets.module');\nconst { withSettings } = requireModule('withSettings.module');\n\nconst STYLES = Object.freeze({\n  \/\/ 正方形\n  SQUARE: '1',\n  \/\/ 填满组件\n  FILL: '2'\n});\n\nconst preference = {\n  column: 2,\n  row: 2,\n  gap: 6,\n  cornerRadius: 12,\n  paddingX: 10,\n  paddingY: 10,\n  style: STYLES.FILL,\n  debug: false\n};\n\/**\n * 图片摆放位置（必填）\n *\n * 可通过打开调试查看位置信息，填入位置对应的数字\n *\/\nconst indexs = [\n  0, 1, 2, 3\n];\n\/**\n * @typedef {object} Shortcut\n * @property {string} icon 图片\n * @property {string} [symbol]\n *  符号（小图标）。可通过我写的 SF Symbols 应用获取\n *\n *  为空时不显示符号和文字，只显示图片\n * @property {string} [title]\n * @property {string} [url] 跳转地址\n *\/\n\/**\n * 图片或快捷方式\n *\n * 根据上述 `indexs` 填写的数字逐个排列\n * @type {Shortcut}\n *\/\nconst shortcuts = [\n  {\n    icon: 'https:\/\/wallhaven.cc\/cdn-cgi\/mirage\/90b40432b273e1ab7fa9c48e717ba5b74f0b24860773afbd15a808573e0d351c\/1280\/https:\/\/w.wallhaven.cc\/full\/x6\/wallhaven-x68r2l.jpg',\n    symbol: 'plus.viewfinder',\n    title: 'Wechat Scan',\n    url: 'weixin:\/\/scanqrcode'\n  },\n  {\n    icon: 'https:\/\/wallhaven.cc\/cdn-cgi\/mirage\/90b40432b273e1ab7fa9c48e717ba5b74f0b24860773afbd15a808573e0d351c\/1280\/https:\/\/w.wallhaven.cc\/full\/vq\/wallhaven-vq9j55.jpg',\n    symbol: 'qrcode.viewfinder',\n    title: 'Alipay Scan',\n    url: 'alipays:\/\/platformapi\/startapp?saId=10000007'\n  },\n  {\n    icon: 'https:\/\/wallhaven.cc\/cdn-cgi\/mirage\/90b40432b273e1ab7fa9c48e717ba5b74f0b24860773afbd15a808573e0d351c\/1280\/https:\/\/w.wallhaven.cc\/full\/zy\/wallhaven-zy8w2y.jpg',\n    symbol: 'barcode.viewfinder',\n    title: 'Alipay Pay',\n    url: 'alipay:\/\/platformapi\/startapp?appId=20000056'\n  },\n  {\n    icon: 'https:\/\/wallhaven.cc\/cdn-cgi\/mirage\/90b40432b273e1ab7fa9c48e717ba5b74f0b24860773afbd15a808573e0d351c\/1280\/https:\/\/w.wallhaven.cc\/full\/2y\/wallhaven-2yy69x.jpg',\n    symbol: 'location.viewfinder',\n    title: 'Health Code',\n    url: 'alipays:\/\/platformapi\/startapp?appId=20000067&url=https%3A%2F%2F68687564.h5app.alipay.com%2Fwww%2Findex.html'\n  }\n];\n\nconst cache = useCache();\nconst getLogo = async (url) => {\n  const hash = hashCode(url);\n  try {\n    const image = cache.readImage(`${hash}`);\n    if (!image) throw new Error('not exist')\n    return image\n  } catch (e) {\n    const image = await getImage(url);\n    cache.writeImage(`${hash}`, image);\n    return image\n  }\n};\n\nconst createNumBg = (n, size = new Size(120, 120)) => {\n  const drawer = new DrawContext();\n  drawer.size = size;\n  drawer.opaque = false;\n  drawer.respectScreenScale = true;\n  const fontSize = Math.min(size.width, size.height) * 0.42;\n  drawer.setFont(Font.boldRoundedSystemFont(fontSize));\n  drawer.setTextColor(Color.dynamic(\n    new Color('#ffffff', 0.6),\n    new Color('#000000', 0.6)\n  ));\n  drawer.setTextAlignedCenter();\n  drawer.drawTextInRect(`${n}`, new Rect(0,\n    (size.height - fontSize) \/ 2, size.width, fontSize));\n  return drawer.getImage()\n};\n\nconst createWidget = async () => {\n  const {\n    column, row,\n    gap, paddingY, paddingX,\n    style,\n    debug\n  } = preference;\n  const widget = new ListWidget();\n  widget.setPadding(paddingY, paddingX, paddingY, paddingX);\n  const stack = widget.addStack();\n  const widgetRect = phoneSize();\n  const family = config.widgetFamily;\n  const scale = Device.screenScale();\n  const widgetWidth = widgetRect[family === 'large' ? 'medium' : family] \/ scale;\n  const widgetHeight = widgetRect[family === 'medium' ? 'small' : family] \/ scale;\n  const itemHeight = (widgetHeight - paddingY * 2 + gap) \/ row - gap;\n  const itemWidth = (widgetWidth - paddingX * 2 + gap) \/ column - gap;\n  const minWidth = Math.min(itemWidth, itemHeight);\n  const { add } = await useGrid(stack, { column, gap });\n  const itemSize = new Size(\n    style === STYLES.SQUARE ? minWidth : itemWidth,\n    style === STYLES.SQUARE ? minWidth : itemHeight\n  );\n  console.log('[info] 可通过此长宽比裁剪图片');\n  console.log(`[info] item size: ${itemSize.width}x${itemSize.height}`);\n\n  const stackList = [];\n  for (let i = 0; i < column * row; i++) {\n    await add((stack) => {\n      const widget = addItem(stack, {\n        width: itemSize.width,\n        height: itemSize.height\n      });\n      if (debug) {\n        widget.backgroundColor = Color.dynamic(\n          new Color('#000000', 0.1),\n          new Color('#ffffff', 0.1)\n        );\n        widget.backgroundImage = createNumBg(i, itemSize);\n      }\n      stackList.push(widget);\n    });\n  }\n\n  const _shortcuts = shortcuts.slice();\n  for (const i of indexs) {\n    const stack = stackList[i];\n    if (_shortcuts.length) {\n      const { icon, symbol, title, url } = _shortcuts.shift();\n      if (symbol) {\n        stack.backgroundImage = await getLogo(icon);\n        const gradient = new LinearGradient();\n        gradient.colors = [new Color('#000000', 0.18)];\n        gradient.locations = [0];\n        gradient.startPoint = new Point(0, 0);\n        gradient.endPoint = new Point(1, 1);\n        stack.backgroundGradient = gradient;\n        stack.setPadding(6, 6, 6, 6);\n        stack.layoutVertically();\n        const sfs = SFSymbol.named(symbol);\n        sfs.applyFont(Font.mediumRoundedSystemFont(50));\n        const iconImg = stack.addImage(sfs.image);\n        const iconHeight = Math.min(itemSize.width, itemSize.height) * 0.5;\n        iconImg.imageSize = new Size(iconHeight, iconHeight);\n        iconImg.tintColor = Color.white();\n        stack.addSpacer(4);\n        const titleText = stack.addText(title);\n        titleText.textColor = Color.white();\n        stack.addStack().addSpacer();\n      } else {\n        const logo = stack.addImage(await getLogo(icon));\n        logo.imageSize = itemSize;\n        logo.applyFillingContentMode();\n      }\n      stack.url = url;\n    }\n  }\n\n  return widget\n};\n\nconst addItem = (container, {\n  width, height,\n  bgColor\n}) => {\n  const { cornerRadius } = preference;\n  const stack = container.addStack();\n  stack.size = new Size(width, height);\n  stack.backgroundColor = bgColor;\n  stack.cornerRadius = cornerRadius;\n  return stack\n};\n\nconst widget = await withSettings({\n  formItems: [\n    {\n      label: i18n(['Column count', '列数']),\n      name: 'column',\n      type: 'number',\n      default: preference.column\n    },\n    {\n      label: i18n(['Row count', '行数']),\n      name: 'row',\n      type: 'number',\n      default: preference.row\n    },\n    {\n      label: i18n(['Fill style', '填充模式']),\n      name: 'style',\n      type: 'select',\n      options: [\n        { label: i18n(['Square', '正方形']), value: STYLES.SQUARE },\n        { label: i18n(['Fill', '填满']), value: STYLES.FILL }\n      ],\n      default: preference.style\n    },\n    {\n      label: i18n(['Gap', '间隙']),\n      name: 'gap',\n      type: 'number',\n      default: preference.gap\n    },\n    {\n      label: i18n(['Corner radius', '圆角']),\n      name: 'cornerRadius',\n      type: 'number',\n      default: preference.cornerRadius\n    },\n    {\n      label: i18n(['Widget horizontal padding', '水平内边距']),\n      name: 'paddingX',\n      type: 'number',\n      default: preference.paddingX\n    },\n    {\n      label: i18n(['Widget vertical padding', '竖向内边距']),\n      name: 'paddingY',\n      type: 'number',\n      default: preference.paddingY\n    },\n    {\n      label: i18n(['Debug', '调试']),\n      name: 'debug',\n      type: 'switch',\n      default: preference.debug\n    }\n  ],\n  render: async ({ family, settings }) => {\n    config.widgetFamily = family ?? config.widgetFamily;\n    Object.assign(preference, settings);\n    const widget = await createWidget()\n      .catch((err) => {\n        console.error(err);\n        return Promise.reject(err)\n      });\n    return widget\n  }\n});\n\nif (config.runsInWidget) {\n  Script.setWidget(widget);\n}\n",
  "share_sheet_inputs" : [

  ]
}