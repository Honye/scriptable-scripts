{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-green",
    "glyph" : "film"
  },
  "name" : "Douban",
  "script" : "\/**\n * Daily Douban\n * \n * - Only support small and medium\n * - Tap widget to open the movie web page\n *\n * @version 1.0.2\n * @author Honye\n *\/\n\n\/**\n * 多语言国际化\n * @param {{[language: string]: string} | [en:string, zh:string]} langs\n *\/\nconst i18n = (langs) => {\n  const language = Device.language();\n  if (Array.isArray(langs)) {\n    langs = {\n      en: langs[0],\n      zh: langs[1],\n      others: langs[0]\n    };\n  } else {\n    langs.others = langs.others || langs.en;\n  }\n  return langs[language] || langs.others\n};\n\n\/**\n * @param {...string} paths\n *\/\nconst joinPath = (...paths) => {\n  const fm = FileManager.local();\n  return paths.reduce((prev, curr) => {\n    return fm.joinPath(prev, curr)\n  }, '')\n};\n\n\/**\n * 规范使用 FileManager。每个脚本使用独立文件夹\n *\n * 注意：桌面组件无法写入 cacheDirectory 和 temporaryDirectory\n * @param {object} options\n * @param {boolean} [options.useICloud]\n * @param {string} [options.basePath]\n *\/\nconst useFileManager = (options = {}) => {\n  const { useICloud, basePath } = options;\n  const fm = useICloud ? FileManager.iCloud() : FileManager.local();\n  const paths = [fm.documentsDirectory(), Script.name()];\n  if (basePath) {\n    paths.push(basePath);\n  }\n  const cacheDirectory = joinPath(...paths);\n  \/**\n   * 删除路径末尾所有的 \/\n   * @param {string} filePath\n   *\/\n  const safePath = (filePath) => {\n    return fm.joinPath(cacheDirectory, filePath).replace(\/\\\/+$\/, '')\n  };\n  \/**\n   * 如果上级文件夹不存在，则先创建文件夹\n   * @param {string} filePath\n   *\/\n  const preWrite = (filePath) => {\n    const i = filePath.lastIndexOf('\/');\n    const directory = filePath.substring(0, i);\n    if (!fm.fileExists(directory)) {\n      fm.createDirectory(directory, true);\n    }\n  };\n\n  const writeString = (filePath, content) => {\n    const nextPath = safePath(filePath);\n    preWrite(nextPath);\n    fm.writeString(nextPath, content);\n  };\n\n  \/**\n   * @param {string} filePath\n   * @param {*} jsonData\n   *\/\n  const writeJSON = (filePath, jsonData) => writeString(filePath, JSON.stringify(jsonData));\n  \/**\n   * @param {string} filePath\n   * @param {Image} image\n   *\/\n  const writeImage = (filePath, image) => {\n    const nextPath = safePath(filePath);\n    preWrite(nextPath);\n    return fm.writeImage(nextPath, image)\n  };\n\n  \/**\n   * 文件不存在时返回 null\n   * @param {string} filePath\n   * @returns {string|null}\n   *\/\n  const readString = (filePath) => {\n    const fullPath = fm.joinPath(cacheDirectory, filePath);\n    if (fm.fileExists(fullPath)) {\n      return fm.readString(\n        fm.joinPath(cacheDirectory, filePath)\n      )\n    }\n    return null\n  };\n\n  \/**\n   * @param {string} filePath\n   *\/\n  const readJSON = (filePath) => JSON.parse(readString(filePath));\n\n  \/**\n   * @param {string} filePath\n   *\/\n  const readImage = (filePath) => {\n    return fm.readImage(fm.joinPath(cacheDirectory, filePath))\n  };\n\n  return {\n    cacheDirectory,\n    writeString,\n    writeJSON,\n    writeImage,\n    readString,\n    readJSON,\n    readImage\n  }\n};\n\n\/** 规范使用文件缓存。每个脚本使用独立文件夹 *\/\nconst useCache = () => useFileManager({ basePath: 'cache' });\n\n\/**\n * @file Scriptable WebView JSBridge native SDK\n * @version 1.0.2\n * @author Honye\n *\/\n\n\/**\n * @typedef Options\n * @property {Record<string, () => void>} methods\n *\/\n\nconst sendResult = (() => {\n  let sending = false;\n  \/** @type {{ code: string; data: any }[]} *\/\n  const list = [];\n\n  \/**\n   * @param {WebView} webView\n   * @param {string} code\n   * @param {any} data\n   *\/\n  return async (webView, code, data) => {\n    if (sending) return\n\n    sending = true;\n    list.push({ code, data });\n    const arr = list.splice(0, list.length);\n    for (const { code, data } of arr) {\n      const eventName = `ScriptableBridge_${code}_Result`;\n      const res = data instanceof Error ? { err: data.message } : data;\n      await webView.evaluateJavaScript(\n        `window.dispatchEvent(\n          new CustomEvent(\n            '${eventName}',\n            { detail: ${JSON.stringify(res)} }\n          )\n        )`\n      );\n    }\n    if (list.length) {\n      const { code, data } = list.shift();\n      sendResult(webView, code, data);\n    } else {\n      sending = false;\n    }\n  }\n})();\n\n\/**\n * @param {WebView} webView\n * @param {Options} options\n *\/\nconst inject = async (webView, options) => {\n  const js =\n`(() => {\n  const queue = window.__scriptable_bridge_queue\n  if (queue && queue.length) {\n    completion(queue)\n  }\n  window.__scriptable_bridge_queue = null\n\n  if (!window.ScriptableBridge) {\n    window.ScriptableBridge = {\n      invoke(name, data, callback) {\n        const detail = { code: name, data }\n\n        const eventName = \\`ScriptableBridge_\\${name}_Result\\`\n        const controller = new AbortController()\n        window.addEventListener(\n          eventName,\n          (e) => {\n            callback && callback(e.detail)\n            controller.abort()\n          },\n          { signal: controller.signal }\n        )\n\n        if (window.__scriptable_bridge_queue) {\n          window.__scriptable_bridge_queue.push(detail)\n          completion()\n        } else {\n          completion(detail)\n          window.__scriptable_bridge_queue = []\n        }\n      }\n    }\n    window.dispatchEvent(\n      new CustomEvent('ScriptableBridgeReady')\n    )\n  }\n})()`;\n\n  const res = await webView.evaluateJavaScript(js, true);\n  if (!res) return inject(webView, options)\n\n  const methods = options.methods || {};\n  const events = Array.isArray(res) ? res : [res];\n  \/\/ 同时执行多次 webView.evaluateJavaScript Scriptable 存在问题\n  \/\/ 可能是因为 JavaScript 是单线程导致的\n  const sendTasks = events.map(({ code, data }) => {\n    return (() => {\n      try {\n        return Promise.resolve(methods[code](data))\n      } catch (e) {\n        return Promise.reject(e)\n      }\n    })()\n      .then((res) => sendResult(webView, code, res))\n      .catch((e) => sendResult(webView, code, e instanceof Error ? e : new Error(e)))\n  });\n  await Promise.all(sendTasks);\n  inject(webView, options);\n};\n\n\/**\n * @param {WebView} webView\n * @param {object} args\n * @param {string} args.html\n * @param {string} [args.baseURL]\n * @param {Options} options\n *\/\nconst loadHTML = async (webView, args, options = {}) => {\n  const { html, baseURL } = args;\n  await webView.loadHTML(html, baseURL);\n  inject(webView, options).catch((err) => console.error(err));\n};\n\n\/**\n * 轻松实现桌面组件可视化配置\n *\n * - 颜色选择器及更多表单控件\n * - 快速预览\n *\n * GitHub: https:\/\/github.com\/honye\n *\n * @version 1.5.2\n * @author Honye\n *\/\n\nconst fm = FileManager.local();\nconst fileName = 'settings.json';\n\nconst toast = (message) => {\n  const notification = new Notification();\n  notification.title = Script.name();\n  notification.body = message;\n  notification.schedule();\n};\n\nconst isUseICloud = () => {\n  const ifm = useFileManager({ useICloud: true });\n  const filePath = fm.joinPath(ifm.cacheDirectory, fileName);\n  return fm.fileExists(filePath)\n};\n\n\/** 查看配置文件可导出分享 *\/\nconst exportSettings = () => {\n  const scopedFM = useFileManager({ useICloud: isUseICloud() });\n  const filePath = fm.joinPath(scopedFM.cacheDirectory, fileName);\n  if (fm.isFileStoredIniCloud(filePath)) {\n    fm.downloadFileFromiCloud(filePath);\n  }\n  if (fm.fileExists(filePath)) {\n    QuickLook.present(filePath);\n  } else {\n    const alert = new Alert();\n    alert.message = i18n(['Using default configuration', '使用的默认配置，未做任何修改']);\n    alert.addCancelAction(i18n(['OK', '好的']));\n    alert.present();\n  }\n};\n\nconst importSettings = async () => {\n  const alert1 = new Alert();\n  alert1.message = i18n([\n    'Will replace existing configuration',\n    '会替换已有配置，确认导入吗？可将现有配置导出备份后再导入其他配置'\n  ]);\n  alert1.addAction(i18n(['Import', '导入']));\n  alert1.addCancelAction(i18n(['Cancel', '取消']));\n  const i = await alert1.present();\n  if (i === -1) return\n\n  const pathList = await DocumentPicker.open(['public.json']);\n  for (const path of pathList) {\n    const fileName = fm.fileName(path, true);\n    const scopedFM = useFileManager({ useICloud: isUseICloud() });\n    const destPath = fm.joinPath(scopedFM.cacheDirectory, fileName);\n    if (fm.fileExists(destPath)) {\n      fm.remove(destPath);\n    }\n    const i = destPath.lastIndexOf('\/');\n    const directory = destPath.substring(0, i);\n    if (!fm.fileExists(directory)) {\n      fm.createDirectory(directory, true);\n    }\n    fm.copy(path, destPath);\n  }\n  const alert = new Alert();\n  alert.message = i18n(['Imported success', '导入成功']);\n  alert.addAction(i18n(['Restart', '重新运行']));\n  await alert.present();\n  const callback = new CallbackURL('scriptable:\/\/\/run');\n  callback.addParameter('scriptName', Script.name());\n  callback.open();\n};\n\n\/**\n * @returns {Promise<Settings>}\n *\/\nconst readSettings = async () => {\n  const useICloud = isUseICloud();\n  console.log(`[info] use ${useICloud ? 'iCloud' : 'local'} settings`);\n  const fm = useFileManager({ useICloud });\n  const settings = fm.readJSON(fileName);\n  return settings\n};\n\n\/**\n * @param {Record<string, unknown>} data\n * @param {{ useICloud: boolean; }} options\n *\/\nconst writeSettings = async (data, { useICloud }) => {\n  const fm = useFileManager({ useICloud });\n  fm.writeJSON(fileName, data);\n};\n\nconst removeSettings = async (settings) => {\n  const cache = useFileManager({ useICloud: settings.useICloud });\n  fm.remove(\n    fm.joinPath(cache.cacheDirectory, fileName)\n  );\n};\n\nconst moveSettings = (useICloud, data) => {\n  const localFM = useFileManager();\n  const iCloudFM = useFileManager({ useICloud: true });\n  const [i, l] = [\n    fm.joinPath(iCloudFM.cacheDirectory, fileName),\n    fm.joinPath(localFM.cacheDirectory, fileName)\n  ];\n  try {\n    \/\/ 移动文件需要创建父文件夹，写入操作会自动创建文件夹\n    writeSettings(data, { useICloud });\n    if (useICloud) {\n      if (fm.fileExists(l)) fm.remove(l);\n    } else {\n      if (fm.fileExists(i)) fm.remove(i);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n\/**\n * @typedef {object} NormalFormItem\n * @property {string} name\n * @property {string} label\n * @property {'text'|'number'|'color'|'select'|'date'|'cell'} [type]\n *  - HTML <input> type 属性\n *  - `'cell'`: 可点击的\n * @property {{ label: string; value: unknown }[]} [options]\n * @property {unknown} [default]\n *\/\n\/**\n * @typedef {Pick<NormalFormItem, 'label'|'name'> & { type: 'group', items: FormItem[] }} GroupFormItem\n *\/\n\/**\n * @typedef {Omit<NormalFormItem, 'type'> & { type: 'page' } & Pick<Options, 'formItems'|'onItemClick'>} PageFormItem 单独的页面\n *\/\n\/**\n * @typedef {NormalFormItem|GroupFormItem|PageFormItem} FormItem\n *\/\n\/**\n * @typedef {object} CommonSettings\n * @property {boolean} useICloud\n * @property {string} [backgroundImage] 背景图路径\n * @property {string} [backgroundColorLight]\n * @property {string} [backgroundColorDark]\n *\/\n\/**\n * @typedef {CommonSettings & Record<string, unknown>} Settings\n *\/\n\/**\n * @typedef {object} Options\n * @property {(data: {\n *  settings: Settings;\n *  family?: typeof config.widgetFamily;\n * }) => ListWidget | Promise<ListWidget>} render\n * @property {string} [head] 顶部插入 HTML\n * @property {FormItem[]} [formItems]\n * @property {(item: FormItem) => void} [onItemClick]\n * @property {string} [homePage] 右上角分享菜单地址\n * @property {(data: any) => void} [onWebEvent]\n *\/\n\/**\n * @template T\n * @typedef {T extends infer O ? {[K in keyof O]: O[K]} : never} Expand\n *\/\n\nconst previewsHTML =\n`<div class=\"actions\">\n  <button class=\"preview\" data-size=\"small\"><i class=\"iconfont icon-yingyongzhongxin\"><\/i>${i18n(['Small', '预览小号'])}<\/button>\n  <button class=\"preview\" data-size=\"medium\"><i class=\"iconfont icon-daliebiao\"><\/i>${i18n(['Medium', '预览中号'])}<\/button>\n  <button class=\"preview\" data-size=\"large\"><i class=\"iconfont icon-dantupailie\"><\/i>${i18n(['Large', '预览大号'])}<\/button>\n<\/div>`;\n\nconst copyrightHTML =\n`<footer>\n  <div class=\"copyright\">© UI powered by <a href=\"javascript:invoke('safari','https:\/\/www.imarkr.com');\">iMarkr<\/a>.<\/div>\n<\/footer>`;\n\n\/**\n * @param {Expand<Options>} options\n * @param {boolean} [isFirstPage]\n * @param {object} [others]\n * @param {Settings} [others.settings]\n * @returns {Promise<ListWidget|undefined>} 仅在 Widget 中运行时返回 ListWidget\n *\/\nconst present = async (options, isFirstPage, others = {}) => {\n  const {\n    formItems = [],\n    onItemClick,\n    render,\n    head,\n    homePage = 'https:\/\/www.imarkr.com',\n    onWebEvent\n  } = options;\n  const cache = useCache();\n\n  const settings = others.settings || await readSettings() || {};\n\n  \/**\n   * @param {Parameters<Options['render']>[0]} param\n   *\/\n  const getWidget = async (param) => {\n    const widget = await render(param);\n    const { backgroundImage, backgroundColorLight, backgroundColorDark } = settings;\n    if (backgroundImage && fm.fileExists(backgroundImage)) {\n      widget.backgroundImage = fm.readImage(backgroundImage);\n    }\n    if (!widget.backgroundColor || backgroundColorLight || backgroundColorDark) {\n      widget.backgroundColor = Color.dynamic(\n        new Color(backgroundColorLight || '#ffffff'),\n        new Color(backgroundColorDark || '#242426')\n      );\n    }\n    return widget\n  };\n\n  if (config.runsInWidget) {\n    const widget = await getWidget({ settings });\n    Script.setWidget(widget);\n    return widget\n  }\n\n  \/\/ ====== web start =======\n  const style =\n`:root {\n  --color-primary: #007aff;\n  --divider-color: rgba(60,60,67,0.36);\n  --card-background: #fff;\n  --card-radius: 10px;\n  --list-header-color: rgba(60,60,67,0.6);\n}\n* {\n  -webkit-user-select: none;\n  user-select: none;\n}\nbody {\n  margin: 10px 0;\n  -webkit-font-smoothing: antialiased;\n  font-family: \"SF Pro Display\",\"SF Pro Icons\",\"Helvetica Neue\",\"Helvetica\",\"Arial\",sans-serif;\n  accent-color: var(--color-primary);\n}\ninput {\n  -webkit-user-select: auto;\n  user-select: auto;\n}\nbody {\n  background: #f2f2f7;\n}\nbutton {\n  font-size: 16px;\n  background: var(--color-primary);\n  color: #fff;\n  border-radius: 8px;\n  border: none;\n  padding: 0.24em 0.5em;\n}\nbutton .iconfont {\n  margin-right: 6px;\n}\n.list {\n  margin: 15px;\n}\n.list__header {\n  margin: 0 20px;\n  color: var(--list-header-color);\n  font-size: 13px;\n}\n.list__body {\n  margin-top: 10px;\n  background: var(--card-background);\n  border-radius: var(--card-radius);\n  border-radius: 12px;\n  overflow: hidden;\n}\n.form-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  column-gap: 1em;\n  font-size: 16px;\n  min-height: 2em;\n  padding: 0.5em 20px;\n  position: relative;\n}\n.form-item--link .icon-arrow_right {\n  color: #86868b;\n}\n.form-item + .form-item::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 20px;\n  right: 0;\n  border-top: 0.5px solid var(--divider-color);\n}\n.form-item__input-wrapper {\n  flex: 1;\n  overflow: hidden;\n  text-align: right;\n}\n.form-item__input {\n  max-width: 100%;\n}\n.form-item .iconfont {\n  margin-right: 4px;\n}\n.form-item input,\n.form-item select {\n  font-size: 14px;\n  text-align: right;\n}\n.form-item input[type=\"checkbox\"] {\n  width: 1.25em;\n  height: 1.25em;\n}\ninput[type=\"number\"] {\n  width: 4em;\n}\ninput[type=\"date\"] {\n  min-width: 6.4em;\n}\ninput[type='checkbox'][role='switch'] {\n  position: relative;\n  display: inline-block;\n  appearance: none;\n  width: 40px;\n  height: 24px;\n  border-radius: 24px;\n  background: #ccc;\n  transition: 0.3s ease-in-out;\n}\ninput[type='checkbox'][role='switch']::before {\n  content: '';\n  position: absolute;\n  left: 2px;\n  top: 2px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: #fff;\n  transition: 0.3s ease-in-out;\n}\ninput[type='checkbox'][role='switch']:checked {\n  background: var(--color-primary);\n}\ninput[type='checkbox'][role='switch']:checked::before {\n  transform: translateX(16px);\n}\n.actions {\n  margin: 15px;\n}\n.copyright {\n  margin: 15px;\n  margin-inline: 18px;\n  font-size: 12px;\n  color: #86868b;\n}\n.copyright a {\n  color: #515154;\n  text-decoration: none;\n}\n.preview.loading {\n  pointer-events: none;\n}\n.icon-loading {\n  display: inline-block;\n  animation: 1s linear infinite spin;\n}\n@keyframes spin {\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(1turn);\n  }\n}\n@media (prefers-color-scheme: dark) {\n  :root {\n    --divider-color: rgba(84,84,88,0.65);\n    --card-background: #1c1c1e;\n    --list-header-color: rgba(235,235,245,0.6);\n  }\n  body {\n    background: #000;\n    color: #fff;\n  }\n  input {\n    background-color: rgb(58, 57, 57);\n    color: var(--color-primary);\n  }\n  input[type='checkbox'][role='switch'] {\n    background-color: rgb(56, 56, 60);\n  }\n  input[type='checkbox'][role='switch']::before {\n    background-color: rgb(206, 206, 206);\n  }\n  select {\n    background-color: rgb(82, 82, 82);\n    border: none;\n  }\n}\n`;\n\n  const js =\n`(() => {\n  const settings = ${JSON.stringify({\n    ...settings,\n    useICloud: isUseICloud()\n  })}\n  const formItems = ${JSON.stringify(formItems)}\n\n  window.invoke = (code, data, cb) => {\n    ScriptableBridge.invoke(code, data, cb)\n  }\n\n  const formData = {}\n\n  const createFormItem = (item) => {\n    const value = settings[item.name] ?? item.default ?? null\n    formData[item.name] = value;\n    const label = document.createElement(\"label\");\n    label.className = \"form-item\";\n    const div = document.createElement(\"div\");\n    div.innerText = item.label;\n    label.appendChild(div);\n    if (\/^(select|multi-select)$\/.test(item.type)) {\n      const wrapper = document.createElement('div')\n      wrapper.className = 'form-item__input-wrapper'\n      const select = document.createElement('select')\n      select.className = 'form-item__input'\n      select.name = item.name\n      select.multiple = item.type === 'multi-select'\n      const map = (options, parent) => {\n        for (const opt of (options || [])) {\n          if (opt.children?.length) {\n            const elGroup = document.createElement('optgroup')\n            elGroup.label = opt.label\n            map(opt.children, elGroup)\n            parent.appendChild(elGroup)\n          } else {\n            const option = document.createElement('option')\n            option.value = opt.value\n            option.innerText = opt.label\n            option.selected = Array.isArray(value) ? value.includes(opt.value) : (value === opt.value)\n            parent.appendChild(option)\n          }\n        }\n      }\n      map(item.options || [], select)\n      select.addEventListener('change', ({ target }) => {\n        let { value } = target\n        if (item.type === 'multi-select') {\n          value = Array.from(target.selectedOptions).map(({ value }) => value)\n        }\n        formData[item.name] = value\n        invoke('changeSettings', formData)\n      })\n      wrapper.appendChild(select)\n      label.appendChild(wrapper)\n    } else if (\n      item.type === 'cell' ||\n      item.type === 'page'\n    ) {\n      label.classList.add('form-item--link')\n      const icon = document.createElement('i')\n      icon.className = 'iconfont icon-arrow_right'\n      label.appendChild(icon)\n      label.addEventListener('click', () => {\n        const { name } = item\n        switch (name) {\n          case 'backgroundImage':\n            invoke('chooseBgImg')\n            break\n          case 'clearBackgroundImage':\n            invoke('clearBgImg')\n            break\n          case 'reset':\n            reset()\n            break\n          default:\n            invoke('itemClick', item)\n        }\n      })\n    } else {\n      const input = document.createElement(\"input\")\n      input.className = 'form-item__input'\n      input.name = item.name\n      input.type = item.type || \"text\";\n      input.enterKeyHint = 'done'\n      input.value = value\n      \/\/ Switch\n      if (item.type === 'switch') {\n        input.type = 'checkbox'\n        input.role = 'switch'\n        input.checked = value\n        if (item.name === 'useICloud') {\n          input.addEventListener('change', (e) => {\n            invoke('moveSettings', e.target.checked)\n          })\n        }\n      }\n      if (item.type === 'number') {\n        input.inputMode = 'decimal'\n      }\n      if (input.type === 'text') {\n        input.size = 12\n      }\n      input.addEventListener(\"change\", (e) => {\n        formData[item.name] =\n          item.type === 'switch'\n          ? e.target.checked\n          : item.type === 'number'\n          ? Number(e.target.value)\n          : e.target.value;\n        invoke('changeSettings', formData)\n      });\n      label.appendChild(input);\n    }\n    return label\n  }\n\n  const createList = (list, title) => {\n    const fragment = document.createDocumentFragment()\n\n    let elBody;\n    for (const item of list) {\n      if (item.type === 'group') {\n        const grouped = createList(item.items, item.label)\n        fragment.appendChild(grouped)\n      } else {\n        if (!elBody) {\n          const groupDiv = fragment.appendChild(document.createElement('div'))\n          groupDiv.className = 'list'\n          if (title) {\n            const elTitle = groupDiv.appendChild(document.createElement('div'))\n            elTitle.className = 'list__header'\n            elTitle.textContent = title\n          }\n          elBody = groupDiv.appendChild(document.createElement('div'))\n          elBody.className = 'list__body'\n        }\n        const label = createFormItem(item)\n        elBody.appendChild(label)\n      }\n    }\n    return fragment\n  }\n\n  const fragment = createList(formItems)\n  document.getElementById('settings').appendChild(fragment)\n\n  for (const btn of document.querySelectorAll('.preview')) {\n    btn.addEventListener('click', (e) => {\n      const target = e.currentTarget\n      target.classList.add('loading')\n      const icon = e.currentTarget.querySelector('.iconfont')\n      const className = icon.className\n      icon.className = 'iconfont icon-loading'\n      invoke(\n        'preview',\n        e.currentTarget.dataset.size,\n        () => {\n          target.classList.remove('loading')\n          icon.className = className\n        }\n      )\n    })\n  }\n\n  const setFieldValue = (name, value) => {\n    const input = document.querySelector(\\`.form-item__input[name=\"\\${name}\"]\\`)\n    if (!input) return\n    if (input.type === 'checkbox') {\n      input.checked = value\n    } else {\n      input.value = value\n    }\n  }\n\n  const reset = (items = formItems) => {\n    for (const item of items) {\n      if (item.type === 'group') {\n        reset(item.items)\n      } else if (item.type === 'page') {\n        continue;\n      } else {\n        setFieldValue(item.name, item.default)\n      }\n    }\n    invoke('removeSettings', formData)\n  }\n})()`;\n\n  const html =\n`<html>\n  <head>\n    <meta name='viewport' content='width=device-width, user-scalable=no'>\n    <link rel=\"stylesheet\" href=\"\/\/at.alicdn.com\/t\/c\/font_3772663_kmo790s3yfq.css\" type=\"text\/css\">\n    <style>${style}<\/style>\n  <\/head>\n  <body>\n  ${head || ''}\n  <section id=\"settings\"><\/section>\n  ${isFirstPage ? (previewsHTML + copyrightHTML) : ''}\n  <script>${js}<\/script>\n  <\/body>\n<\/html>`;\n\n  const webView = new WebView();\n  const methods = {\n    async preview (data) {\n      const widget = await getWidget({ settings, family: data });\n      widget[`present${data.replace(data[0], data[0].toUpperCase())}`]();\n    },\n    safari (data) {\n      Safari.openInApp(data, true);\n    },\n    changeSettings (data) {\n      Object.assign(settings, data);\n      writeSettings(settings, { useICloud: settings.useICloud });\n    },\n    moveSettings (data) {\n      settings.useICloud = data;\n      moveSettings(data, settings);\n    },\n    removeSettings (data) {\n      Object.assign(settings, data);\n      clearBgImg();\n      removeSettings(settings);\n    },\n    chooseBgImg (data) {\n      chooseBgImg();\n    },\n    clearBgImg () {\n      clearBgImg();\n    },\n    async itemClick (data) {\n      if (data.type === 'page') {\n        \/\/ `data` 经传到 HTML 后丢失了不可序列化的数据，因为需要从源数据查找\n        const item = (() => {\n          const find = (items) => {\n            for (const el of items) {\n              if (el.name === data.name) return el\n\n              if (el.type === 'group') {\n                const r = find(el.items);\n                if (r) return r\n              }\n            }\n            return null\n          };\n          return find(formItems)\n        })();\n        await present(item, false, { settings });\n      } else {\n        await onItemClick?.(data, { settings });\n      }\n    },\n    native (data) {\n      onWebEvent?.(data);\n    }\n  };\n  await loadHTML(\n    webView,\n    { html, baseURL: homePage },\n    { methods }\n  );\n\n  const clearBgImg = () => {\n    const { backgroundImage } = settings;\n    delete settings.backgroundImage;\n    if (backgroundImage && fm.fileExists(backgroundImage)) {\n      fm.remove(backgroundImage);\n    }\n    writeSettings(settings, { useICloud: settings.useICloud });\n    toast(i18n(['Cleared success!', '背景已清除']));\n  };\n\n  const chooseBgImg = async () => {\n    try {\n      const image = await Photos.fromLibrary();\n      cache.writeImage('bg.png', image);\n      const imgPath = fm.joinPath(cache.cacheDirectory, 'bg.png');\n      settings.backgroundImage = imgPath;\n      writeSettings(settings, { useICloud: settings.useICloud });\n    } catch (e) {\n      console.log('[info] 用户取消选择图片');\n    }\n  };\n\n  webView.present();\n  \/\/ ======= web end =========\n};\n\n\/**\n * @param {Options} options\n *\/\nconst withSettings = async (options) => {\n  const { formItems, onItemClick, ...restOptions } = options;\n  return present({\n    formItems: [\n      {\n        label: i18n(['Common', '通用']),\n        type: 'group',\n        items: [\n          {\n            label: i18n(['Sync with iCloud', 'iCloud 同步']),\n            type: 'switch',\n            name: 'useICloud',\n            default: false\n          },\n          {\n            label: i18n(['Background', '背景']),\n            type: 'page',\n            name: 'background',\n            formItems: [\n              {\n                label: i18n(['Background', '背景']),\n                type: 'group',\n                items: [\n                  {\n                    name: 'backgroundColorLight',\n                    type: 'color',\n                    label: i18n(['Background color (light)', '背景色（白天）']),\n                    default: '#ffffff'\n                  },\n                  {\n                    name: 'backgroundColorDark',\n                    type: 'color',\n                    label: i18n(['Background color (dark)', '背景色（夜间）']),\n                    default: '#242426'\n                  },\n                  {\n                    label: i18n(['Background image', '背景图']),\n                    type: 'cell',\n                    name: 'backgroundImage'\n                  }\n                ]\n              },\n              {\n                type: 'group',\n                items: [\n                  {\n                    label: i18n(['Clear background image', '清除背景图']),\n                    type: 'cell',\n                    name: 'clearBackgroundImage'\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            label: i18n(['Config', '配置']),\n            type: 'page',\n            name: 'config',\n            formItems: [\n              {\n                label: i18n(['Export settings', '导出配置']),\n                type: 'cell',\n                name: 'export'\n              },\n              {\n                label: i18n(['Import settings', '导入配置']),\n                type: 'cell',\n                name: 'import'\n              }\n            ],\n            onItemClick: (item) => {\n              const { name } = item;\n              if (name === 'export') {\n                exportSettings();\n              }\n              if (name === 'import') {\n                importSettings().catch((err) => {\n                  console.error(err);\n                  throw err\n                });\n              }\n            }\n          },\n          {\n            label: i18n(['Reset', '重置']),\n            type: 'cell',\n            name: 'reset'\n          }\n        ]\n      },\n      {\n        label: i18n(['Settings', '设置']),\n        type: 'group',\n        items: formItems\n      }\n    ],\n    onItemClick: (item, ...args) => {\n      onItemClick?.(item, ...args);\n    },\n    ...restOptions\n  }, true)\n};\n\nconst render = async () => {\n  const fmt = new DateFormatter();\n  fmt.dateFormat = 'yyyy-MM-dd';\n  const date = fmt.string(new Date());\n  const url = `https:\/\/frodo.douban.com\/api\/v2\/calendar\/today?apikey=0ab215a8b1977939201640fa14c66bab&date=${date}&alt=json&_sig=tuOyn%2B2uZDBFGAFBLklc2GkuQk4%3D&_ts=1610703479`;\n  const request = new Request(url);\n  request.headers = {\n    'User-Agent': 'api-client\/0.1.3 com.douban.frodo\/8.0.0'\n  };\n  const data = await request.loadJSON();\n\n  const widgetFamily = config.widgetFamily;\n  switch (widgetFamily) {\n    case 'small':\n      return renderSmall(data)\n    case 'medium':\n      return renderMedium(data)\n    default:\n      return renderMedium(data)\n  }\n};\n\nconst renderSmall = async (data) => {\n  const widget = new ListWidget();\n  widget.url = data.subject.url;\n  widget.setPadding(8, 8, 16, 8);\n  const image = await getImage(data.comment.poster);\n  widget.backgroundImage = await shadowImage(image);\n  widget.addSpacer();\n  const textTitle = widget.addText(`《${data.subject.title}》`);\n  textTitle.font = Font.boldSystemFont(15);\n  textTitle.textColor = Color.white();\n  textTitle.lineLimit = 1;\n  textTitle.minimumScaleFactor = 0.5;\n  widget.addSpacer(5);\n  const stackRating = widget.addStack();\n  await widgetRating(stackRating, data);\n  return widget\n};\n\nconst renderMedium = async (data) => {\n  const widget = new ListWidget();\n  widget.url = data.subject.url;\n  widget.setPadding(8, 8, 16, 8);\n  const image = await getImage(data.comment.poster);\n  widget.backgroundImage = await shadowImage(image);\n  widget.addSpacer();\n  const stackRating = widget.addStack();\n  stackRating.centerAlignContent();\n  const textTitle = stackRating.addText(`《${data.subject.title}》`);\n  textTitle.font = Font.boldSystemFont(15);\n  textTitle.textColor = Color.white();\n  textTitle.lineLimit = 1;\n  textTitle.minimumScaleFactor = 0.5;\n  stackRating.addSpacer(6);\n  await widgetRating(stackRating, data);\n  stackRating.addSpacer();\n  widget.addSpacer(5);\n  const stackContent = widget.addStack();\n  const textContent = stackContent.addText(`“${data.comment.content}”`);\n  textContent.font = Font.boldSystemFont(12);\n  textContent.textColor = Color.white();\n  textContent.lineLimit = 2;\n  textContent.minimumScaleFactor = 0.5;\n  return widget\n};\n\nconst widgetRating = async (widget, data) => {\n  const stack = widget.addStack();\n  stack.size = new Size(64, 15);\n  stack.backgroundColor = new Color('#feac2d');\n  stack.cornerRadius = 7.5;\n  stack.centerAlignContent();\n  const ratingText = data.subject.rating === null ? '无' : data.subject.rating.value;\n  const textTitle = stack.addText(`豆瓣评分 ${ratingText}`);\n  textTitle.font = Font.boldSystemFont(9);\n  textTitle.textColor = Color.black();\n  textTitle.lineLimit = 1;\n  textTitle.minimumScaleFactor = 0.5;\n};\n\nconst getImage = async (url) => {\n  const request = new Request(url);\n  request.headers = {\n    'User-Agent': 'FRDMoonWidgetExtension\/8.0.0 (iPhone; iOS 16.5.1; Scale\/2.00)'\n  };\n  const image = await request.loadImage();\n  return image\n};\n\nconst shadowImage = async (image) => {\n  const size = image.size;\n  const ctx = new DrawContext();\n  ctx.size = size;\n  ctx.drawImageInRect(image, new Rect(0, 0, size.width, size.height));\n  ctx.setFillColor(new Color('#000000', 0.2));\n  ctx.fillRect(new Rect(0, 0, size.width, size.height));\n  const res = await ctx.getImage();\n  return res\n};\n\nawait withSettings({\n  formItems: [],\n  render: ({ family }) => {\n    family && (config.widgetFamily = family);\n    return render()\n  }\n});\n",
  "share_sheet_inputs" : [

  ]
}